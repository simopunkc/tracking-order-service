// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"sync"
	"tracking-order-service/internal/app/domain"
)

// Ensure, that SicepatRepositoryMock does implement SicepatRepository.
// If this is not the case, regenerate this file with moq.
var _ SicepatRepository = &SicepatRepositoryMock{}

// SicepatRepositoryMock is a mock implementation of SicepatRepository.
//
// 	func TestSomethingThatUsesSicepatRepository(t *testing.T) {
//
// 		// make and configure a mocked SicepatRepository
// 		mockedSicepatRepository := &SicepatRepositoryMock{
// 			GetLastStatusOrderFunc: func(orderStatus string, sicepatApi domain.SicepatResponseBodyApi) domain.ResultSicepatStatus {
// 				panic("mock out the GetLastStatusOrder method")
// 			},
// 			TrackingFunc: func(ctx context.Context, config domain.RepositoryParam) domain.ResultSicepatRepository {
// 				panic("mock out the Tracking method")
// 			},
// 		}
//
// 		// use mockedSicepatRepository in code that requires SicepatRepository
// 		// and then make assertions.
//
// 	}
type SicepatRepositoryMock struct {
	// GetLastStatusOrderFunc mocks the GetLastStatusOrder method.
	GetLastStatusOrderFunc func(orderStatus string, sicepatApi domain.SicepatResponseBodyApi) domain.ResultSicepatStatusOrder

	// TrackingFunc mocks the Tracking method.
	TrackingFunc func(ctx context.Context, config domain.RepositoryParam) domain.ResultSicepatRepository

	// calls tracks calls to the methods.
	calls struct {
		// GetLastStatusOrder holds details about calls to the GetLastStatusOrder method.
		GetLastStatusOrder []struct {
			// OrderStatus is the orderStatus argument value.
			OrderStatus string
			// SicepatApi is the sicepatApi argument value.
			SicepatApi domain.SicepatResponseBodyApi
		}
		// Tracking holds details about calls to the Tracking method.
		Tracking []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Config is the config argument value.
			Config domain.RepositoryParam
		}
	}
	lockGetLastStatusOrder sync.RWMutex
	lockTracking           sync.RWMutex
}

// GetLastStatusOrder calls GetLastStatusOrderFunc.
func (mock *SicepatRepositoryMock) GetLastStatusOrder(orderStatus string, sicepatApi domain.SicepatResponseBodyApi) domain.ResultSicepatStatusOrder {
	if mock.GetLastStatusOrderFunc == nil {
		panic("SicepatRepositoryMock.GetLastStatusOrderFunc: method is nil but SicepatRepository.GetLastStatusOrder was just called")
	}
	callInfo := struct {
		OrderStatus string
		SicepatApi  domain.SicepatResponseBodyApi
	}{
		OrderStatus: orderStatus,
		SicepatApi:  sicepatApi,
	}
	mock.lockGetLastStatusOrder.Lock()
	mock.calls.GetLastStatusOrder = append(mock.calls.GetLastStatusOrder, callInfo)
	mock.lockGetLastStatusOrder.Unlock()
	return mock.GetLastStatusOrderFunc(orderStatus, sicepatApi)
}

// GetLastStatusOrderCalls gets all the calls that were made to GetLastStatusOrder.
// Check the length with:
//     len(mockedSicepatRepository.GetLastStatusOrderCalls())
func (mock *SicepatRepositoryMock) GetLastStatusOrderCalls() []struct {
	OrderStatus string
	SicepatApi  domain.SicepatResponseBodyApi
} {
	var calls []struct {
		OrderStatus string
		SicepatApi  domain.SicepatResponseBodyApi
	}
	mock.lockGetLastStatusOrder.RLock()
	calls = mock.calls.GetLastStatusOrder
	mock.lockGetLastStatusOrder.RUnlock()
	return calls
}

// Tracking calls TrackingFunc.
func (mock *SicepatRepositoryMock) Tracking(ctx context.Context, config domain.RepositoryParam) domain.ResultSicepatRepository {
	if mock.TrackingFunc == nil {
		panic("SicepatRepositoryMock.TrackingFunc: method is nil but SicepatRepository.Tracking was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Config domain.RepositoryParam
	}{
		Ctx:    ctx,
		Config: config,
	}
	mock.lockTracking.Lock()
	mock.calls.Tracking = append(mock.calls.Tracking, callInfo)
	mock.lockTracking.Unlock()
	return mock.TrackingFunc(ctx, config)
}

// TrackingCalls gets all the calls that were made to Tracking.
// Check the length with:
//     len(mockedSicepatRepository.TrackingCalls())
func (mock *SicepatRepositoryMock) TrackingCalls() []struct {
	Ctx    context.Context
	Config domain.RepositoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Config domain.RepositoryParam
	}
	mock.lockTracking.RLock()
	calls = mock.calls.Tracking
	mock.lockTracking.RUnlock()
	return calls
}
