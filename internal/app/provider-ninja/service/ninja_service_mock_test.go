// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"sync"
	"tracking-order-service/internal/app/domain"
)

// Ensure, that NinjaRepositoryMock does implement NinjaRepository.
// If this is not the case, regenerate this file with moq.
var _ NinjaRepository = &NinjaRepositoryMock{}

// NinjaRepositoryMock is a mock implementation of NinjaRepository.
//
// 	func TestSomethingThatUsesNinjaRepository(t *testing.T) {
//
// 		// make and configure a mocked NinjaRepository
// 		mockedNinjaRepository := &NinjaRepositoryMock{
// 			GetLastStatusOrderFunc: func(ninjaResponseBodyApis []domain.NinjaResponseBodyApi, ninjaResponseBodyApi domain.NinjaResponseBodyApi) domain.ListNinjaResponseBodyApi {
// 				panic("mock out the GetLastStatusOrder method")
// 			},
// 			TrackingFunc: func(contextMoqParam context.Context, repositoryParam domain.RepositoryParam) domain.ResultNinjaRepository {
// 				panic("mock out the Tracking method")
// 			},
// 		}
//
// 		// use mockedNinjaRepository in code that requires NinjaRepository
// 		// and then make assertions.
//
// 	}
type NinjaRepositoryMock struct {
	// GetLastStatusOrderFunc mocks the GetLastStatusOrder method.
	GetLastStatusOrderFunc func(ninjaResponseBodyApis []domain.NinjaResponseBodyApi, ninjaResponseBodyApi domain.NinjaResponseBodyApi) domain.ListNinjaResponseBodyApi

	// TrackingFunc mocks the Tracking method.
	TrackingFunc func(contextMoqParam context.Context, repositoryParam domain.RepositoryParam) domain.ResultNinjaRepository

	// calls tracks calls to the methods.
	calls struct {
		// GetLastStatusOrder holds details about calls to the GetLastStatusOrder method.
		GetLastStatusOrder []struct {
			// NinjaResponseBodyApis is the ninjaResponseBodyApis argument value.
			NinjaResponseBodyApis []domain.NinjaResponseBodyApi
			// NinjaResponseBodyApi is the ninjaResponseBodyApi argument value.
			NinjaResponseBodyApi domain.NinjaResponseBodyApi
		}
		// Tracking holds details about calls to the Tracking method.
		Tracking []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// RepositoryParam is the repositoryParam argument value.
			RepositoryParam domain.RepositoryParam
		}
	}
	lockGetLastStatusOrder sync.RWMutex
	lockTracking           sync.RWMutex
}

// GetLastStatusOrder calls GetLastStatusOrderFunc.
func (mock *NinjaRepositoryMock) GetLastStatusOrder(ninjaResponseBodyApis []domain.NinjaResponseBodyApi, ninjaResponseBodyApi domain.NinjaResponseBodyApi) domain.ListNinjaResponseBodyApi {
	if mock.GetLastStatusOrderFunc == nil {
		panic("NinjaRepositoryMock.GetLastStatusOrderFunc: method is nil but NinjaRepository.GetLastStatusOrder was just called")
	}
	callInfo := struct {
		NinjaResponseBodyApis []domain.NinjaResponseBodyApi
		NinjaResponseBodyApi  domain.NinjaResponseBodyApi
	}{
		NinjaResponseBodyApis: ninjaResponseBodyApis,
		NinjaResponseBodyApi:  ninjaResponseBodyApi,
	}
	mock.lockGetLastStatusOrder.Lock()
	mock.calls.GetLastStatusOrder = append(mock.calls.GetLastStatusOrder, callInfo)
	mock.lockGetLastStatusOrder.Unlock()
	return mock.GetLastStatusOrderFunc(ninjaResponseBodyApis, ninjaResponseBodyApi)
}

// GetLastStatusOrderCalls gets all the calls that were made to GetLastStatusOrder.
// Check the length with:
//     len(mockedNinjaRepository.GetLastStatusOrderCalls())
func (mock *NinjaRepositoryMock) GetLastStatusOrderCalls() []struct {
	NinjaResponseBodyApis []domain.NinjaResponseBodyApi
	NinjaResponseBodyApi  domain.NinjaResponseBodyApi
} {
	var calls []struct {
		NinjaResponseBodyApis []domain.NinjaResponseBodyApi
		NinjaResponseBodyApi  domain.NinjaResponseBodyApi
	}
	mock.lockGetLastStatusOrder.RLock()
	calls = mock.calls.GetLastStatusOrder
	mock.lockGetLastStatusOrder.RUnlock()
	return calls
}

// Tracking calls TrackingFunc.
func (mock *NinjaRepositoryMock) Tracking(contextMoqParam context.Context, repositoryParam domain.RepositoryParam) domain.ResultNinjaRepository {
	if mock.TrackingFunc == nil {
		panic("NinjaRepositoryMock.TrackingFunc: method is nil but NinjaRepository.Tracking was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		RepositoryParam domain.RepositoryParam
	}{
		ContextMoqParam: contextMoqParam,
		RepositoryParam: repositoryParam,
	}
	mock.lockTracking.Lock()
	mock.calls.Tracking = append(mock.calls.Tracking, callInfo)
	mock.lockTracking.Unlock()
	return mock.TrackingFunc(contextMoqParam, repositoryParam)
}

// TrackingCalls gets all the calls that were made to Tracking.
// Check the length with:
//     len(mockedNinjaRepository.TrackingCalls())
func (mock *NinjaRepositoryMock) TrackingCalls() []struct {
	ContextMoqParam context.Context
	RepositoryParam domain.RepositoryParam
} {
	var calls []struct {
		ContextMoqParam context.Context
		RepositoryParam domain.RepositoryParam
	}
	mock.lockTracking.RLock()
	calls = mock.calls.Tracking
	mock.lockTracking.RUnlock()
	return calls
}
